// Code generated by mockery v2.15.0. DO NOT EDIT.

package acal

import mock "github.com/stretchr/testify/mock"

// MockTypedValue is an autogenerated mock type for the TypedValue type
type MockTypedValue[T interface{}] struct {
	mock.Mock
}

// ExtractValues provides a mock function with given fields: cache
func (_m *MockTypedValue[T]) ExtractValues(cache IValueCache) IValueCache {
	ret := _m.Called(cache)

	var r0 IValueCache
	if rf, ok := ret.Get(0).(func(IValueCache) IValueCache); ok {
		r0 = rf(cache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(IValueCache)
		}
	}

	return r0
}

// GetAlias provides a mock function with given fields:
func (_m *MockTypedValue[T]) GetAlias() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockTypedValue[T]) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTypedValue provides a mock function with given fields:
func (_m *MockTypedValue[T]) GetTypedValue() T {
	ret := _m.Called()

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// GetValue provides a mock function with given fields:
func (_m *MockTypedValue[T]) GetValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IsNil provides a mock function with given fields:
func (_m *MockTypedValue[T]) IsNil() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SelfReplaceIfNil provides a mock function with given fields:
func (_m *MockTypedValue[T]) SelfReplaceIfNil() Value {
	ret := _m.Called()

	var r0 Value
	if rf, ok := ret.Get(0).(func() Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Value)
		}
	}

	return r0
}

// SetAlias provides a mock function with given fields: _a0
func (_m *MockTypedValue[T]) SetAlias(_a0 string) {
	_m.Called(_a0)
}

// ToSyntaxOperand provides a mock function with given fields: nextOp
func (_m *MockTypedValue[T]) ToSyntaxOperand(nextOp Op) *SyntaxOperand {
	ret := _m.Called(nextOp)

	var r0 *SyntaxOperand
	if rf, ok := ret.Get(0).(func(Op) *SyntaxOperand); ok {
		r0 = rf(nextOp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SyntaxOperand)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockTypedValue interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTypedValue creates a new instance of MockTypedValue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTypedValue[T interface{}](t mockConstructorTestingTNewMockTypedValue) *MockTypedValue[T] {
	mock := &MockTypedValue[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
