// Code generated by mockery v2.28.1. DO NOT EDIT.

package acal

import mock "github.com/stretchr/testify/mock"

// MockIMarshalOps is an autogenerated mock type for the IMarshalOps type
type MockIMarshalOps struct {
	mock.Mock
}

// MarshalJSON provides a mock function with given fields: values
func (_m *MockIMarshalOps) MarshalJSON(values ...Value) ([]byte, error) {
	_va := make([]interface{}, len(values))
	for _i := range values {
		_va[_i] = values[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(...Value) ([]byte, error)); ok {
		return rf(values...)
	}
	if rf, ok := ret.Get(0).(func(...Value) []byte); ok {
		r0 = rf(values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(...Value) error); ok {
		r1 = rf(values...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarshalJSONByFields provides a mock function with given fields: data
func (_m *MockIMarshalOps) MarshalJSONByFields(data interface{}) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockIMarshalOps interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIMarshalOps creates a new instance of MockIMarshalOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIMarshalOps(t mockConstructorTestingTNewMockIMarshalOps) *MockIMarshalOps {
	mock := &MockIMarshalOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
