// Code generated by mockery v2.15.0. DO NOT EDIT.

package acal

import mock "github.com/stretchr/testify/mock"

// MockTagger is an autogenerated mock type for the Tagger type
type MockTagger struct {
	mock.Mock
}

// GetTags provides a mock function with given fields:
func (_m *MockTagger) GetTags() Tags {
	ret := _m.Called()

	var r0 Tags
	if rf, ok := ret.Get(0).(func() Tags); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Tags)
		}
	}

	return r0
}

// Tag provides a mock function with given fields: _a0
func (_m *MockTagger) Tag(_a0 ...Tag) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

type mockConstructorTestingTNewMockTagger interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTagger creates a new instance of MockTagger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTagger(t mockConstructorTestingTNewMockTagger) *MockTagger {
	mock := &MockTagger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
