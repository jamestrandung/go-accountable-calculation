// Code generated by mockery v2.28.1. DO NOT EDIT.

package boolean

import (
	acal "github.com/jamestrandung/go-accountable-calculation/acal"
	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// And provides a mock function with given fields: _a0
func (_m *MockInterface) And(_a0 acal.TypedValue[bool]) Simple {
	ret := _m.Called(_a0)

	var r0 Simple
	if rf, ok := ret.Get(0).(func(acal.TypedValue[bool]) Simple); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Simple)
	}

	return r0
}

// Bool provides a mock function with given fields:
func (_m *MockInterface) Bool() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExtractValues provides a mock function with given fields: cache
func (_m *MockInterface) ExtractValues(cache acal.IValueCache) acal.IValueCache {
	ret := _m.Called(cache)

	var r0 acal.IValueCache
	if rf, ok := ret.Get(0).(func(acal.IValueCache) acal.IValueCache); ok {
		r0 = rf(cache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(acal.IValueCache)
		}
	}

	return r0
}

// GetAlias provides a mock function with given fields:
func (_m *MockInterface) GetAlias() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockInterface) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetValue provides a mock function with given fields:
func (_m *MockInterface) GetValue() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// HasIdentity provides a mock function with given fields:
func (_m *MockInterface) HasIdentity() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Identify provides a mock function with given fields:
func (_m *MockInterface) Identify() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsNil provides a mock function with given fields:
func (_m *MockInterface) IsNil() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Not provides a mock function with given fields:
func (_m *MockInterface) Not() Simple {
	ret := _m.Called()

	var r0 Simple
	if rf, ok := ret.Get(0).(func() Simple); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(Simple)
	}

	return r0
}

// Or provides a mock function with given fields: _a0
func (_m *MockInterface) Or(_a0 acal.TypedValue[bool]) Simple {
	ret := _m.Called(_a0)

	var r0 Simple
	if rf, ok := ret.Get(0).(func(acal.TypedValue[bool]) Simple); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Simple)
	}

	return r0
}

// SelfReplaceIfNil provides a mock function with given fields:
func (_m *MockInterface) SelfReplaceIfNil() acal.Value {
	ret := _m.Called()

	var r0 acal.Value
	if rf, ok := ret.Get(0).(func() acal.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(acal.Value)
		}
	}

	return r0
}

// SetAlias provides a mock function with given fields: _a0
func (_m *MockInterface) SetAlias(_a0 string) {
	_m.Called(_a0)
}

// Stringify provides a mock function with given fields:
func (_m *MockInterface) Stringify() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Then provides a mock function with given fields:
func (_m *MockInterface) Then() Interface {
	ret := _m.Called()

	var r0 Interface
	if rf, ok := ret.Get(0).(func() Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Interface)
		}
	}

	return r0
}

// ToSyntaxOperand provides a mock function with given fields: nextOp
func (_m *MockInterface) ToSyntaxOperand(nextOp acal.Op) *acal.SyntaxOperand {
	ret := _m.Called(nextOp)

	var r0 *acal.SyntaxOperand
	if rf, ok := ret.Get(0).(func(acal.Op) *acal.SyntaxOperand); ok {
		r0 = rf(nextOp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acal.SyntaxOperand)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterface(t mockConstructorTestingTNewMockInterface) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
